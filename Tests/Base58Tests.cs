using NUnit.Framework;
using Org.BouncyCastle.Math;
using RazorSharp.Converters;
using System;

namespace Tests
{
	[TestFixture]
	public class Base58Tests
	{
		[Test]
		public void Base58NullTest()
		{
			Assert.Throws<ArgumentNullException>(() => Base58Converter.ByteArray = null);
			Assert.Throws<ArgumentNullException>(() => Base58Converter.Base58String = null);
		}

		[Test]
		public void Base58BadSymbol()
		{
			Assert.Throws<ArgumentException>(() => Base58Converter.Base58String = "abc0");
			Assert.Throws<ArgumentException>(() => Base58Converter.Base58String = "stesteO");
			Assert.Throws<ArgumentException>(() => Base58Converter.Base58String = "zzzIzzz");
			Assert.DoesNotThrow(() => Base58Converter.Base58String = "abc");
			Assert.DoesNotThrow(() => Base58Converter.Base58String = "123");
			Assert.DoesNotThrow(() => Base58Converter.Base58String = "zzz123");
		}

		[TestCase (new byte[]{ 0 }, ExpectedResult = "1")]
		[TestCase(new byte[] { 0, 0, 0, 0 }, ExpectedResult = "1111")]
		[TestCase(new byte[] { 0, 0, 0, 1 }, ExpectedResult = "1112")]
		[TestCase(new byte[] { 0x27, 0x1f, 0x35, 0xc1 }, ExpectedResult = "21111a")]
		[TestCase(new byte[] { 0x00, 0x02, 0x14, 0x48, 0x60, 0x7f, 0x5e }, ExpectedResult = "123456789")]
		[TestCase(new byte[] { 0x00, 0x01, 0x11, 0xd3, 0x8e, 0x5f, 0xc9, 0x07, 0x1f, 0xfc, 0xd2, 0x0b, 0x4a,
			0x76, 0x3c, 0xc9, 0xae, 0x4f, 0x25, 0x2b, 0xb4, 0xe4, 0x8f, 0xd6, 0x6a, 0x83, 0x5e, 0x25, 0x2a,
			0xda, 0x93, 0xff, 0x48, 0x0d, 0x6d, 0xd4, 0x3d, 0xc6, 0x2a, 0x64, 0x11, 0x55, 0xa5 }, ExpectedResult = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")]
		[TestCase(new byte[] { 0x01, 0x03, 0x64, 0x8f, 0x22, 0x1d, 0xb6, 0x93, 0x34, 0x81, 0xe7, 0x6c, 0x4b, 
			0x72, 0x5c, 0x9d, 0x54, 0x6d, 0xa2, 0x37, 0x03, 0x29, 0x15, 0xe6, 0x7e, 0x47, 0x61, 0xd8, 0x48, 
			0x8f, 0x2b, 0xd0, 0x6f, 0xa7, 0xd7, 0x0e, 0xca, 0xb7 }, ExpectedResult = "9hE6LcotZ5FhADZW6gKkvZtsajtK6UE1xpz5MkWwnnC8s44jDZg")]
		[TestCase(new byte[] { 0x2f, 0xf6, 0xbc, 0x40, 0x69, 0xbd, 0xfa, 0x28, 0x5d, 0xc3, 0x70, 0x67, 0x93, 
			0x8a, 0xf6, 0x08, 0xb4, 0x45, 0xd6, 0xde, 0xfb, 0xcb, 0x11, 0x8a, 0xce, 0x7e, 0x72, 0x96, 0xf6, 
			0x0f, 0x20, 0x2c, 0x00, 0xbb, 0xed, 0x38, 0x5c, 0xfa, 0xf8, 0xdf, 0x97, 0xe6, 0x19, 0x47, 0x28, 
			0x42, 0x05, 0x4f, 0x00, 0x7c, 0x5c, 0x3d, 0xd0, 0x7e, 0xba, 0xb1, 0x67, 0x13, 0x6d, 0x61, 0xf7, 
			0x40, 0xc5, 0x0a }, ExpectedResult = "xcugxvB3PoPTMEAxSUX7Z6hCchRBd75sgfuCYnLfCp4VtMoPp8oZegQNyJhx54C7zjcGq1bWie6R8xSpZ4yDiGZ")]
		[TestCase(new byte[] { 0x04, 0x88, 0xad, 0xe4, 0x01, 0xbd, 0x16, 0xbe, 0xe5, 0x00, 0x00, 0x00, 0x00, 
			0xf0, 0x90, 0x9a, 0xff, 0xaa, 0x7e, 0xe7, 0xab, 0xe5, 0xdd, 0x4e, 0x10, 0x05, 0x98, 0xd4, 0xdc, 
			0x53, 0xcd, 0x70, 0x9d, 0x5a, 0x5c, 0x2c, 0xac, 0x40, 0xe7, 0x41, 0x2f, 0x23, 0x2f, 0x7c, 0x9c, 
			0x00, 0xab, 0xe7, 0x4a, 0x98, 0xf6, 0xc7, 0xea, 0xbe, 0xe0, 0x42, 0x8f, 0x53, 0x79, 0x8f, 0x0a, 
			0xb8, 0xaa, 0x1b, 0xd3, 0x78, 0x73, 0x99, 0x90, 0x41, 0x70, 0x3c, 0x74, 0x2f, 0x15, 0xac, 0x7e, 
			0x1e, 0x17, 0x66, 0x8a, 0x0b }, ExpectedResult = "xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt")]
		[TestCase(new byte[] { 0x02, 0x13, 0x16, 0x1c, 0x53, 0x59, 0xeb, 0x41, 0xab, 0x25, 0xf0,
			0xe5, 0x15, 0xd3, 0xbb, 0x4c, 0xd2, 0x76, 0xfa, 0xf4, 0x93, 0x24, 0x39, 0xc2, 0x50, 0xbd, 0x38, 0x29, 0x82, 0xed, 0xa0, 0xd0, 0xd3, 0x6b, 0x39, 0x8c, 0xe8, 0x15, 0x9a,
			0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }, ExpectedResult = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz")]
		public string Base58EncodingTest(byte[] input)
		{
			Base58Converter.ByteArray = input;
			return Base58Converter.Base58String;
		}

		[TestCase("1", ExpectedResult = new byte[] { 0 })]
		[TestCase("1111", ExpectedResult = new byte[] { 0, 0, 0, 0 })]
		[TestCase("1112", ExpectedResult = new byte[] { 0, 0, 0, 1 })]
		[TestCase("21111a", ExpectedResult = new byte[] { 0x27, 0x1f, 0x35, 0xc1 })]
		[TestCase("123456789", ExpectedResult = new byte[] { 0x00, 0x02, 0x14, 0x48, 0x60, 0x7f, 0x5e })]
		[TestCase("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz", ExpectedResult = new byte[] { 0x00, 0x01, 0x11, 0xd3, 0x8e, 0x5f, 0xc9, 0x07, 0x1f, 0xfc, 0xd2, 0x0b, 0x4a,
			0x76, 0x3c, 0xc9, 0xae, 0x4f, 0x25, 0x2b, 0xb4, 0xe4, 0x8f, 0xd6, 0x6a, 0x83, 0x5e, 0x25, 0x2a,
			0xda, 0x93, 0xff, 0x48, 0x0d, 0x6d, 0xd4, 0x3d, 0xc6, 0x2a, 0x64, 0x11, 0x55, 0xa5 })]
		[TestCase("9hE6LcotZ5FhADZW6gKkvZtsajtK6UE1xpz5MkWwnnC8s44jDZg", ExpectedResult = new byte[] { 0x01, 0x03, 0x64, 0x8f, 0x22, 0x1d, 0xb6, 0x93, 0x34, 0x81, 0xe7, 0x6c, 0x4b,
			0x72, 0x5c, 0x9d, 0x54, 0x6d, 0xa2, 0x37, 0x03, 0x29, 0x15, 0xe6, 0x7e, 0x47, 0x61, 0xd8, 0x48,
			0x8f, 0x2b, 0xd0, 0x6f, 0xa7, 0xd7, 0x0e, 0xca, 0xb7 })]
		[TestCase("xcugxvB3PoPTMEAxSUX7Z6hCchRBd75sgfuCYnLfCp4VtMoPp8oZegQNyJhx54C7zjcGq1bWie6R8xSpZ4yDiGZ", ExpectedResult = new byte[] { 0x2f, 0xf6, 0xbc, 0x40, 0x69, 0xbd, 0xfa, 0x28, 0x5d, 0xc3, 0x70, 0x67, 0x93,
			0x8a, 0xf6, 0x08, 0xb4, 0x45, 0xd6, 0xde, 0xfb, 0xcb, 0x11, 0x8a, 0xce, 0x7e, 0x72, 0x96, 0xf6,
			0x0f, 0x20, 0x2c, 0x00, 0xbb, 0xed, 0x38, 0x5c, 0xfa, 0xf8, 0xdf, 0x97, 0xe6, 0x19, 0x47, 0x28,
			0x42, 0x05, 0x4f, 0x00, 0x7c, 0x5c, 0x3d, 0xd0, 0x7e, 0xba, 0xb1, 0x67, 0x13, 0x6d, 0x61, 0xf7,
			0x40, 0xc5, 0x0a })]
		[TestCase("xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt", ExpectedResult = new byte[] { 0x04, 0x88, 0xad, 0xe4, 0x01, 0xbd, 0x16, 0xbe, 0xe5, 0x00, 0x00, 0x00, 0x00,
			0xf0, 0x90, 0x9a, 0xff, 0xaa, 0x7e, 0xe7, 0xab, 0xe5, 0xdd, 0x4e, 0x10, 0x05, 0x98, 0xd4, 0xdc,
			0x53, 0xcd, 0x70, 0x9d, 0x5a, 0x5c, 0x2c, 0xac, 0x40, 0xe7, 0x41, 0x2f, 0x23, 0x2f, 0x7c, 0x9c,
			0x00, 0xab, 0xe7, 0x4a, 0x98, 0xf6, 0xc7, 0xea, 0xbe, 0xe0, 0x42, 0x8f, 0x53, 0x79, 0x8f, 0x0a,
			0xb8, 0xaa, 0x1b, 0xd3, 0x78, 0x73, 0x99, 0x90, 0x41, 0x70, 0x3c, 0x74, 0x2f, 0x15, 0xac, 0x7e,
			0x1e, 0x17, 0x66, 0x8a, 0x0b })]
		[TestCase("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", ExpectedResult = new byte[] { 0x02, 0x13, 0x16, 0x1c, 0x53, 0x59, 0xeb, 0x41, 0xab, 0x25, 0xf0,
			0xe5, 0x15, 0xd3, 0xbb, 0x4c, 0xd2, 0x76, 0xfa, 0xf4, 0x93, 0x24, 0x39, 0xc2, 0x50, 0xbd, 0x38, 0x29, 0x82, 0xed, 0xa0, 0xd0, 0xd3, 0x6b, 0x39, 0x8c, 0xe8, 0x15, 0x9a, 
			0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff })]
		public byte[] Base58DecodingTest(string input)
		{
			Base58Converter.Base58String = input;
			return Base58Converter.ByteArray;
		}
	}
}